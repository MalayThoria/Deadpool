version: '3.8'

services:
  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: lp-assistant-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - static_files:/var/www/static
      - media_files:/var/www/media
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - lp-assistant-network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
        - REACT_APP_ENVIRONMENT=production
    container_name: lp-assistant-frontend
    expose:
      - "80"
    volumes:
      - static_files:/app/build/static
    restart: unless-stopped
    networks:
      - lp-assistant-network
    environment:
      - NODE_ENV=production
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Backend FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: lp-assistant-backend
    expose:
      - "8000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - media_files:/app/media
    env_file:
      - .env.production
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - lp-assistant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: lp-assistant-db
    environment:
      POSTGRES_DB: lp_assistant_prod
      POSTGRES_USER: ${DB_USER:-lp_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_this}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    restart: unless-stopped
    networks:
      - lp-assistant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-lp_user} -d lp_assistant_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lp-assistant-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_this}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    restart: unless-stopped
    networks:
      - lp-assistant-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: lp-assistant-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - lp-assistant-network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: lp-assistant-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password_change_this}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - lp-assistant-network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Watchtower for Auto Updates
  watchtower:
    image: containrrr/watchtower
    container_name: lp-assistant-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_LABEL_ENABLE=true
    restart: unless-stopped
    networks:
      - lp-assistant-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local

networks:
  lp-assistant-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16