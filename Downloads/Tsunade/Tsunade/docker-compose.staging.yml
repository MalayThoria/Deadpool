version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lp_assistant_postgres_staging
    environment:
      POSTGRES_DB: lp_assistant_db
      POSTGRES_USER: lp_assistant_user
      POSTGRES_PASSWORD: lp_assistant_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - lp_assistant_staging_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lp_assistant_user -d lp_assistant_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lp_assistant_redis_staging
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_staging_data:/data
    ports:
      - "6379:6379"
    networks:
      - lp_assistant_staging_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # MongoDB
  mongodb:
    image: mongo:6
    container_name: lp_assistant_mongodb_staging
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: mongo_password
      MONGO_INITDB_DATABASE: lp_assistant_mongo
    volumes:
      - mongodb_staging_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - lp_assistant_staging_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lp_assistant_backend_staging
    env_file:
      - .env.staging
    environment:
      - DATABASE_URL=postgresql://lp_assistant_user:lp_assistant_password@postgres:5432/lp_assistant_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - MONGODB_URL=mongodb://mongo_user:mongo_password@mongodb:27017/lp_assistant_mongo
      - SECRET_KEY=staging-secret-key-for-uat-testing-32-chars-min
      - ENVIRONMENT=staging
      - CORS_ORIGINS=http://localhost:3000,http://localhost:80,http://staging.lpassistant.com
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - staging_uploads:/app/uploads
      - staging_logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - lp_assistant_staging_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-staging.rule=Host(`staging-api.lpassistant.com`)"
      - "traefik.http.services.backend-staging.loadbalancer.server.port=8000"

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:8000
        - REACT_APP_ENVIRONMENT=staging
    container_name: lp_assistant_frontend_staging
    ports:
      - "3000:80"
    networks:
      - lp_assistant_staging_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-staging.rule=Host(`staging.lpassistant.com`)"
      - "traefik.http.services.frontend-staging.loadbalancer.server.port=80"

  # Nginx Load Balancer for staging
  nginx:
    image: nginx:alpine
    container_name: lp_assistant_nginx_staging
    volumes:
      - ./nginx/staging.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - lp_assistant_staging_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx-staging.rule=Host(`staging.lpassistant.com`)"

  # Monitoring with Prometheus (Optional for staging)
  prometheus:
    image: prom/prometheus:latest
    container_name: lp_assistant_prometheus_staging
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'  # Shorter retention for staging
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_staging_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - lp_assistant_staging_network
    restart: unless-stopped

  # Grafana Dashboard (Optional for staging)
  grafana:
    image: grafana/grafana:latest
    container_name: lp_assistant_grafana_staging
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=staging123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001/
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - lp_assistant_staging_network
    restart: unless-stopped

  # Database initialization service
  db-init:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lp_assistant_db_init_staging
    env_file:
      - .env.staging
    environment:
      - DATABASE_URL=postgresql://lp_assistant_user:lp_assistant_password@postgres:5432/lp_assistant_db
    command: python init_db.py
    networks:
      - lp_assistant_staging_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  mongodb_staging_data:
    driver: local
  prometheus_staging_data:
    driver: local
  grafana_staging_data:
    driver: local
  staging_uploads:
    driver: local
  staging_logs:
    driver: local

networks:
  lp_assistant_staging_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    labels:
      - "environment=staging"
      - "project=lp-assistant"